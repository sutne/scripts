#! /usr/bin/env python3

import argparse
import glob
import os
from pathlib import Path
from typing import Callable, Union

from setup.config import pandoc_templates_path
from setup.util import min_python_version

min_python_version(3, 9)


parser = argparse.ArgumentParser(
    description="Convert '.md' files to '.pdf' with pandoc"
)
parser.add_argument(
    "-f",
    "--force",
    action="store_true",  # default value will be `False`
    help="Force conversion, even if .md hasn't changed since PDF was updated",
)
parser.add_argument(
    "--only",
    nargs="*",
    default=[],
    help="List of filenames (without extension) to convert, all others are ignored",
)
parser.add_argument(
    "--excl",
    nargs="*",
    default=[],
    help="List of filenames (without extension) to not convert, all others are converted",
)
parser.add_argument(
    "--only-template",
    type=str,
    default=None,
    help="Only convert files that use this specified template",
)
args = vars(parser.parse_args())


# convenience lambdas
get_filename: Callable[[str], str] = lambda path: Path(path).stem
get_filedir: Callable[[str], str] = lambda path: os.path.dirname(path)
last_edit_time: Callable[[str], float] = lambda path: os.path.getmtime(path)
to_pdf: Callable[[str], str] = lambda md_path: md_path.replace(".md", ".pdf")


def main():
    markdown_files = get_markdown_files_to_convert()
    convert_to_pdf(markdown_files)


def get_markdown_files_to_convert() -> list[str]:
    """Find all markdown files that should be converted"""
    # Find all markdown files in `cwd` and all subdirs
    files = sorted(glob.glob(f"**/*.md", recursive=True))
    if args["only"] != []:
        # filter away any files with names not in given filenames
        return list(filter(lambda f: get_filename(f) in args["only"], files))
    if args["excl"] != []:
        # filter away all files with names to exclude
        return list(filter(lambda f: get_filename(f) not in args["excl"], files))
    return files


def convert_to_pdf(files: list[str]) -> None:
    if len(files) == 0:
        print("No files to convert")
        return
    pandoc_args = [
        "-s",
        "--pdf-engine=pdflatex",
        "--filter pandoc-crossref",
        "--citeproc",
        "--listings",
        # pandoc-crossref args/defaults
        "-M codeBlockCaptions=true",
        "-M figPrefix='Figure'",
        "-M tblPrefix='Table'",
        "-M eqnPrefix='Equation'",
        "-M lstPrefix='Listing'",
        "-M secPrefix='Section'",
    ]
    pandoc_args = " ".join(pandoc_args)
    for markdown_file in files:
        convert_file(markdown_file, pandoc_args)
    print("Done")


def convert_file(markdown_file: str, pandoc_args: str):
    # add template to args if it is specified in metadata
    template = find_yaml_template(markdown_file)
    if template is not None:
        pandoc_args += f" --template {os.path.join(pandoc_templates_path, template)}"

    if args["only_template"] != None:
        if args["only_template"] != template:
            return

    # check if conversion is needed
    if not needs_conversion(markdown_file):
        print(f"Up to date: {markdown_file}")
        return

    # convert file
    filedir = os.path.dirname(markdown_file)
    filename = os.path.basename(markdown_file)

    print(f"Converting: {markdown_file}")
    run_command(
        f"pandoc {pandoc_args} -i '{filename}' -o '{to_pdf(filename)}';",
        from_dir=filedir,
    )


def needs_conversion(markdown_file: str) -> bool:
    """Return true if PDF needs to be created/updated.
    Argument must be full path to file"""
    if args["force"]:
        return True  # force conversion, even if pdf is up to date
    pdf_file = to_pdf(markdown_file)
    if not os.path.isfile(pdf_file):
        return True  # PDF doesn't exist
    # check if markdown has been edited after PDF was created
    return last_edit_time(pdf_file) < last_edit_time(markdown_file)


def find_yaml_template(markdown_file: str) -> Union[str, None]:
    with open(markdown_file, "r") as file:
        if not file.readline().strip() == "---":
            return None  # file has no metadata
        for line in file:
            if line.strip() == "---":
                break  # reached end of metadata
            if line.find(":") == -1:
                continue  # metadata entry is not key-value pair
            key, value = [l.strip() for l in line.split(":")]
            if key == "template":
                return value
    return None


def run_command(command: str, from_dir: str = ""):
    if from_dir == "":
        os.system(command)
        return
    cwd = os.path.abspath(os.getcwd())
    # move to `from_dir`
    os.chdir(from_dir)
    # run command
    os.system(command)
    # move back to original cwd
    os.chdir(cwd)


if __name__ == "__main__":
    main()
