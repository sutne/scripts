#! /usr/bin/env python3

from pathlib import Path
import glob
import os


ignored_filenames = [
    "README",
]


def main():
    markdown_files = get_markdown_files()
    convert_to_pdf(markdown_files)


def get_markdown_files() -> list[str]:
    """Find all markdown files in cwd and all subdirs"""
    files = sorted(glob.glob(f"**/*.md", recursive=True))
    files = list(filter(lambda f: Path(f).stem not in ignored_filenames, files))
    return files


def find_yaml_template(markdown_path: str) -> str:
    with open(markdown_path, "r") as markdown_file:
        if not markdown_file.readline().strip() == "---":
            return None  # file has no metadata
        for line in markdown_file:
            if line.strip() == "---":
                break  # reached end of metadata
            if line.find(":") == -1:
                continue  # metadata entry is not key-value pair
            key, value = [l.strip() for l in line.split(":")]
            if key == "template":
                return value
    return None


def get_pdf_file(markdown_filename: str) -> str:
    """Remove the .md extension from the filepath, and replace it with .pdf"""
    return markdown_filename.replace(".md", ".pdf")


def needs_conversion(markdown_file: str, pdf_file: str) -> bool:
    """Return true if PDF needs to be created/updated.
    Arguments must be full path to both files"""
    if not os.path.isfile(pdf_file):
        return True  # PDF doesn't exist
    # check if markdown has been edited after PDF was created
    pdf_time = os.path.getmtime(pdf_file)
    markdown_time = os.path.getmtime(markdown_file)
    return pdf_time < markdown_time


def convert_to_pdf(filenames: list[str]) -> None:
    pandoc_args = [
        "-s",
        "--filter pandoc-crossref",
        "--listings",
        "--citeproc",
        "--pdf-engine=pdflatex",
    ]

    # Convert all the files in the list
    for markdown_file in filenames:
        # create pdf name and check if conversion is needed
        pdf_file = get_pdf_file(markdown_file)
        if not needs_conversion(markdown_file, pdf_file):
            print(f"   Skipped: {markdown_file}")
            continue

        # setup pandoc settings
        settings = " ".join(pandoc_args)

        # Check if template should be used
        template = find_yaml_template(markdown_file)
        if template is not None:
            settings += f" --template={template}"

        print(f"Converting: {markdown_file}")
        os.system(f"pandoc {settings} -i '{markdown_file}' -o '{pdf_file}';")
    print("Done")


if __name__ == "__main__":
    main()
