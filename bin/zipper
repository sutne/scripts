#!/usr/bin/env python

import argparse
import fnmatch
import os
from glob import glob
from zipfile import ZipFile

from setup.util import min_python_version

min_python_version(3, 9)


parser = argparse.ArgumentParser(
    description="Easily create a .zip of the current directory, skipping any files/folders that are in any .gitignore"
)
parser.add_argument(
    "-n",
    "--name",
    default="archive.zip",
    help="Name of the created zipfile, default is 'archive.zip'",
)
parser.add_argument(
    "-v",
    "--verbose",
    action="store_true",  # default will be `False`
    help="Print patterns used, and all ignored files in addition to included files",
)
parser.add_argument(
    "--excl",
    nargs="*",
    default=[],
    help="List of files/folders/extensions to not convert in addition to those in gitignore, all others are converted",
)
parser.add_argument(
    "--only",
    nargs="*",
    default=[],
    help="List of files/folders/extensions to convert, all others are ignored, overrides ignored patterns",
)
args = vars(parser.parse_args())


def main():
    gitignore_files = find_all_gitignore()
    gitignore, gitinclude = parse_gitignore_files(gitignore_files)
    if args["only"]:
        gitignore, gitinclude = ["**"], args["only"]
    if args["excl"]:
        gitignore.extend(args["excl"])
    if args["verbose"]:
        print("Ignore\t", gitignore)
        print("Include\t", gitinclude, "\n")
    files = get_files(gitignore, gitinclude)
    create_zip(files)


def find_all_gitignore() -> list[str]:
    return glob("**/.gitignore", recursive=True)


def parse_gitignore_files(gitignore_files: list[str]) -> tuple[list[str], list[str]]:
    # zipfile_path required to not recursively add the zip
    ignore_patterns: list[str] = [args["name"]]
    include_patterns: list[str] = []
    for gitignore_file in gitignore_files:
        path = os.path.dirname(gitignore_file)
        with open(gitignore_file) as gitignore:
            for line in gitignore:
                if line == "":
                    continue
                if line.startswith("#"):
                    continue
                if line.startswith("!"):
                    include_pattern = os.path.join(path, line.removeprefix("!").strip())
                    include_patterns.append(include_pattern)
                    continue
                pattern = os.path.join(path, line.strip())
                ignore_patterns.append(pattern)
    return ignore_patterns, include_patterns


def all_files() -> list[str]:
    files = glob("**", recursive=True)
    return list(filter(lambda f: not os.path.isdir(f), files))


def get_files(
    ignore_patterns: list[str],
    include_patterns: list[str],
) -> dict[str, bool]:
    files = {}
    for f in all_files():
        files[f] = True
    # remove all files from ignore patterns
    for pattern in convert_patterns(ignore_patterns):
        should_ignore = fnmatch.filter(files.keys(), pattern)
        for name in should_ignore:
            files[name] = False
    # re add any ignored files that should be included after all
    for pattern in convert_patterns(include_patterns):
        ignored = [f for f in files.keys() if not files[f]]
        should_re_add = fnmatch.filter(ignored, pattern)
        for name in should_re_add:
            files[name] = True

    return dict(sorted(files.items()))


def convert_patterns(patterns: list[str]) -> list[str]:
    """Convert a gitignore pattern to a fnmatch pattern"""
    additions = []
    for i in range(len(patterns)):
        pattern = patterns[i]
        if not pattern.startswith(("/", "*")):
            pattern = f"**{pattern}"
        if os.path.isdir(pattern) or len(pattern.split(".")) == 1:
            additions.append(f"{pattern}/**")
        patterns[i] = pattern
    patterns.extend(additions)
    return patterns


def create_zip(files: dict[str, bool]) -> None:
    name = f"{args['name'].split('.')[0]}.zip"
    print(f"Creating '{name}' with:")
    with ZipFile(name, "w") as zipper:
        for f, add in files.items():
            if add:
                print(f"\t{f}")
                zipper.write(f)
            elif args["verbose"]:
                print(f"ignored {f}")


if __name__ == "__main__":
    main()
